//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Orbit
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::Orbit.Orbit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Orbit.Orbit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Orbit.Orbit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Orbit.Orbit_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[49];
            _typeNameTable[0] = "Orbit.ViewModels.Base.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Orbit.ViewModels.PlanetsViewModel";
            _typeNameTable[3] = "Orbit.ViewModels.Base.ViewModelBase";
            _typeNameTable[4] = "Orbit.ViewModels.PlanetDetailViewModel";
            _typeNameTable[5] = "Orbit.Helpers.Composition.CompositionShadow";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[7] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[8] = "Windows.UI.Color";
            _typeNameTable[9] = "System.ValueType";
            _typeNameTable[10] = "Double";
            _typeNameTable[11] = "Windows.UI.Composition.DropShadow";
            _typeNameTable[12] = "Windows.UI.Composition.CompositionShadow";
            _typeNameTable[13] = "Windows.UI.Composition.CompositionObject";
            _typeNameTable[14] = "Windows.UI.Composition.CompositionBrush";
            _typeNameTable[15] = "Orbit.Helpers.Composition.CompositionImage";
            _typeNameTable[16] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[17] = "System.Uri";
            _typeNameTable[18] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[19] = "Boolean";
            _typeNameTable[20] = "Orbit.Helpers.Composition.LoadTimeEffectHandler";
            _typeNameTable[21] = "System.MulticastDelegate";
            _typeNameTable[22] = "System.Delegate";
            _typeNameTable[23] = "Windows.UI.Composition.CompositionSurfaceBrush";
            _typeNameTable[24] = "Windows.UI.Composition.SpriteVisual";
            _typeNameTable[25] = "Windows.UI.Composition.ContainerVisual";
            _typeNameTable[26] = "Windows.UI.Composition.Visual";
            _typeNameTable[27] = "TimeSpan";
            _typeNameTable[28] = "Orbit.Controls.TimelineStory";
            _typeNameTable[29] = "Orbit.Models.Planet";
            _typeNameTable[30] = "Orbit.Controls.Timeline";
            _typeNameTable[31] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[32] = "Orbit.Controls.TimelinePanel";
            _typeNameTable[33] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[34] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[35] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[36] = "Orbit.Controls.TimelineItem";
            _typeNameTable[37] = "Orbit.Controls.FocusableItem";
            _typeNameTable[38] = "Int32";
            _typeNameTable[39] = "Byte";
            _typeNameTable[40] = "Orbit.Views.Base.PageBase";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[42] = "Orbit.StateTriggers.DeviceFamilyStateTrigger";
            _typeNameTable[43] = "Windows.UI.Xaml.StateTriggerBase";
            _typeNameTable[44] = "Orbit.StateTriggers.DeviceFamily";
            _typeNameTable[45] = "System.Enum";
            _typeNameTable[46] = "Orbit.Views.PlanetDetailView";
            _typeNameTable[47] = "Orbit.Views.PlanetsView";
            _typeNameTable[48] = "Orbit.Views.RootView";

            _typeTable = new global::System.Type[49];
            _typeTable[0] = typeof(global::Orbit.ViewModels.Base.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Orbit.ViewModels.PlanetsViewModel);
            _typeTable[3] = typeof(global::Orbit.ViewModels.Base.ViewModelBase);
            _typeTable[4] = typeof(global::Orbit.ViewModels.PlanetDetailViewModel);
            _typeTable[5] = typeof(global::Orbit.Helpers.Composition.CompositionShadow);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[8] = typeof(global::Windows.UI.Color);
            _typeTable[9] = typeof(global::System.ValueType);
            _typeTable[10] = typeof(global::System.Double);
            _typeTable[11] = typeof(global::Windows.UI.Composition.DropShadow);
            _typeTable[12] = typeof(global::Windows.UI.Composition.CompositionShadow);
            _typeTable[13] = typeof(global::Windows.UI.Composition.CompositionObject);
            _typeTable[14] = typeof(global::Windows.UI.Composition.CompositionBrush);
            _typeTable[15] = typeof(global::Orbit.Helpers.Composition.CompositionImage);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[17] = typeof(global::System.Uri);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[19] = typeof(global::System.Boolean);
            _typeTable[20] = typeof(global::Orbit.Helpers.Composition.LoadTimeEffectHandler);
            _typeTable[21] = typeof(global::System.MulticastDelegate);
            _typeTable[22] = typeof(global::System.Delegate);
            _typeTable[23] = typeof(global::Windows.UI.Composition.CompositionSurfaceBrush);
            _typeTable[24] = typeof(global::Windows.UI.Composition.SpriteVisual);
            _typeTable[25] = typeof(global::Windows.UI.Composition.ContainerVisual);
            _typeTable[26] = typeof(global::Windows.UI.Composition.Visual);
            _typeTable[27] = typeof(global::System.TimeSpan);
            _typeTable[28] = typeof(global::Orbit.Controls.TimelineStory);
            _typeTable[29] = typeof(global::Orbit.Models.Planet);
            _typeTable[30] = typeof(global::Orbit.Controls.Timeline);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[32] = typeof(global::Orbit.Controls.TimelinePanel);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[35] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[36] = typeof(global::Orbit.Controls.TimelineItem);
            _typeTable[37] = typeof(global::Orbit.Controls.FocusableItem);
            _typeTable[38] = typeof(global::System.Int32);
            _typeTable[39] = typeof(global::System.Byte);
            _typeTable[40] = typeof(global::Orbit.Views.Base.PageBase);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[42] = typeof(global::Orbit.StateTriggers.DeviceFamilyStateTrigger);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.StateTriggerBase);
            _typeTable[44] = typeof(global::Orbit.StateTriggers.DeviceFamily);
            _typeTable[45] = typeof(global::System.Enum);
            _typeTable[46] = typeof(global::Orbit.Views.PlanetDetailView);
            _typeTable[47] = typeof(global::Orbit.Views.PlanetsView);
            _typeTable[48] = typeof(global::Orbit.Views.RootView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::Orbit.ViewModels.Base.ViewModelLocator(); }
        private object Activate_4_PlanetDetailViewModel() { return new global::Orbit.ViewModels.PlanetDetailViewModel(); }
        private object Activate_5_CompositionShadow() { return new global::Orbit.Helpers.Composition.CompositionShadow(); }
        private object Activate_15_CompositionImage() { return new global::Orbit.Helpers.Composition.CompositionImage(); }
        private object Activate_28_TimelineStory() { return new global::Orbit.Controls.TimelineStory(); }
        private object Activate_29_Planet() { return new global::Orbit.Models.Planet(); }
        private object Activate_30_Timeline() { return new global::Orbit.Controls.Timeline(); }
        private object Activate_32_TimelinePanel() { return new global::Orbit.Controls.TimelinePanel(); }
        private object Activate_36_TimelineItem() { return new global::Orbit.Controls.TimelineItem(); }
        private object Activate_37_FocusableItem() { return new global::Orbit.Controls.FocusableItem(); }
        private object Activate_40_PageBase() { return new global::Orbit.Views.Base.PageBase(); }
        private object Activate_42_DeviceFamilyStateTrigger() { return new global::Orbit.StateTriggers.DeviceFamilyStateTrigger(); }
        private object Activate_46_PlanetDetailView() { return new global::Orbit.Views.PlanetDetailView(); }
        private object Activate_47_PlanetsView() { return new global::Orbit.Views.PlanetsView(); }
        private object Activate_48_RootView() { return new global::Orbit.Views.RootView(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Orbit.Orbit_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Orbit.ViewModels.Base.ViewModelLocator
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("PlanetsViewModel");
                userType.AddMemberName("PlanetDetailViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Orbit.ViewModels.PlanetsViewModel
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Orbit.ViewModels.Base.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  Orbit.ViewModels.Base.ViewModelBase
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Orbit.ViewModels.PlanetDetailViewModel
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Orbit.ViewModels.Base.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Orbit.Helpers.Composition.CompositionShadow
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_5_CompositionShadow;
                userType.SetContentPropertyName("Orbit.Helpers.Composition.CompositionShadow.CastingElement");
                userType.AddMemberName("CastingElement");
                userType.AddMemberName("Color");
                userType.AddMemberName("OffsetX");
                userType.AddMemberName("OffsetY");
                userType.AddMemberName("ShadowOpacity");
                userType.AddMemberName("BlurRadius");
                userType.AddMemberName("DropShadow");
                userType.AddMemberName("Mask");
                userType.AddMemberName("OffsetZ");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.UI.Color
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 9:   //  System.ValueType
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  Double
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Windows.UI.Composition.DropShadow
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionShadow"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Composition.CompositionShadow
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionObject"));
                xamlType = userType;
                break;

            case 13:   //  Windows.UI.Composition.CompositionObject
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Composition.CompositionBrush
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionObject"));
                xamlType = userType;
                break;

            case 15:   //  Orbit.Helpers.Composition.CompositionImage
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_15_CompositionImage;
                userType.AddMemberName("Source");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("IsContentLoaded");
                userType.AddMemberName("SharedSurface");
                userType.AddMemberName("LoadTimeEffectHandler");
                userType.AddMemberName("Brush");
                userType.AddMemberName("PlaceholderBrush");
                userType.AddMemberName("SurfaceBrush");
                userType.AddMemberName("SpriteVisual");
                userType.AddMemberName("PlaceholderDelay");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  System.Uri
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Boolean
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Orbit.Helpers.Composition.LoadTimeEffectHandler
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  System.MulticastDelegate
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 22:   //  System.Delegate
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Composition.CompositionSurfaceBrush
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionBrush"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Composition.SpriteVisual
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.ContainerVisual"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Composition.ContainerVisual
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.Visual"));
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Composition.Visual
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionObject"));
                xamlType = userType;
                break;

            case 27:   //  TimeSpan
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  Orbit.Controls.TimelineStory
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_28_TimelineStory;
                userType.AddMemberName("Item");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Orbit.Models.Planet
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Orbit.Controls.Timeline
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_30_Timeline;
                userType.AddMemberName("TimelinePanel");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("HeaderContent");
                userType.AddMemberName("ItemsSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Orbit.Controls.TimelinePanel
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_32_TimelinePanel;
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("TopItemIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  Orbit.Controls.TimelineItem
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_36_TimelineItem;
                userType.AddMemberName("IsActionable");
                userType.AddMemberName("IsInFocus");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Orbit.Controls.FocusableItem
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_37_FocusableItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Int32
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 39:   //  Byte
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  Orbit.Views.Base.PageBase
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_40_PageBase;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Orbit.StateTriggers.DeviceFamilyStateTrigger
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.StateTriggerBase"));
                userType.Activator = Activate_42_DeviceFamilyStateTrigger;
                userType.AddMemberName("DeviceFamily");
                userType.AddMemberName("IsActive");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  Windows.UI.Xaml.StateTriggerBase
                xamlType = new global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Orbit.StateTriggers.DeviceFamily
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unknown", global::Orbit.StateTriggers.DeviceFamily.Unknown);
                userType.AddEnumValue("Desktop", global::Orbit.StateTriggers.DeviceFamily.Desktop);
                userType.AddEnumValue("Mobile", global::Orbit.StateTriggers.DeviceFamily.Mobile);
                userType.AddEnumValue("Team", global::Orbit.StateTriggers.DeviceFamily.Team);
                userType.AddEnumValue("IoT", global::Orbit.StateTriggers.DeviceFamily.IoT);
                userType.AddEnumValue("Xbox", global::Orbit.StateTriggers.DeviceFamily.Xbox);
                userType.AddEnumValue("Holographic", global::Orbit.StateTriggers.DeviceFamily.Holographic);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  System.Enum
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 46:   //  Orbit.Views.PlanetDetailView
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Orbit.Views.Base.PageBase"));
                userType.Activator = Activate_46_PlanetDetailView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Orbit.Views.PlanetsView
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Orbit.Views.Base.PageBase"));
                userType.Activator = Activate_47_PlanetsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Orbit.Views.RootView
                userType = new global::Orbit.Orbit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_RootView;
                userType.AddMemberName("ImageCount");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_ViewModelLocator_PlanetsViewModel(object instance)
        {
            var that = (global::Orbit.ViewModels.Base.ViewModelLocator)instance;
            return that.PlanetsViewModel;
        }
        private object get_1_ViewModelLocator_PlanetDetailViewModel(object instance)
        {
            var that = (global::Orbit.ViewModels.Base.ViewModelLocator)instance;
            return that.PlanetDetailViewModel;
        }
        private object get_2_CompositionShadow_CastingElement(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.CastingElement;
        }
        private void set_2_CompositionShadow_CastingElement(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.CastingElement = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_3_CompositionShadow_Color(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.Color;
        }
        private void set_3_CompositionShadow_Color(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_4_CompositionShadow_OffsetX(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.OffsetX;
        }
        private void set_4_CompositionShadow_OffsetX(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.OffsetX = (global::System.Double)Value;
        }
        private object get_5_CompositionShadow_OffsetY(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.OffsetY;
        }
        private void set_5_CompositionShadow_OffsetY(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.OffsetY = (global::System.Double)Value;
        }
        private object get_6_CompositionShadow_ShadowOpacity(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.ShadowOpacity;
        }
        private void set_6_CompositionShadow_ShadowOpacity(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.ShadowOpacity = (global::System.Double)Value;
        }
        private object get_7_CompositionShadow_BlurRadius(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.BlurRadius;
        }
        private void set_7_CompositionShadow_BlurRadius(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.BlurRadius = (global::System.Double)Value;
        }
        private object get_8_CompositionShadow_DropShadow(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.DropShadow;
        }
        private object get_9_CompositionShadow_Mask(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.Mask;
        }
        private void set_9_CompositionShadow_Mask(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.Mask = (global::Windows.UI.Composition.CompositionBrush)Value;
        }
        private object get_10_CompositionShadow_OffsetZ(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            return that.OffsetZ;
        }
        private void set_10_CompositionShadow_OffsetZ(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionShadow)instance;
            that.OffsetZ = (global::System.Double)Value;
        }
        private object get_11_CompositionImage_Source(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.Source;
        }
        private void set_11_CompositionImage_Source(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_12_CompositionImage_Stretch(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.Stretch;
        }
        private void set_12_CompositionImage_Stretch(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_13_CompositionImage_IsContentLoaded(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.IsContentLoaded;
        }
        private object get_14_CompositionImage_SharedSurface(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.SharedSurface;
        }
        private void set_14_CompositionImage_SharedSurface(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            that.SharedSurface = (global::System.Boolean)Value;
        }
        private object get_15_CompositionImage_LoadTimeEffectHandler(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.LoadTimeEffectHandler;
        }
        private void set_15_CompositionImage_LoadTimeEffectHandler(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            that.LoadTimeEffectHandler = (global::Orbit.Helpers.Composition.LoadTimeEffectHandler)Value;
        }
        private object get_16_CompositionImage_Brush(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.Brush;
        }
        private void set_16_CompositionImage_Brush(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            that.Brush = (global::Windows.UI.Composition.CompositionBrush)Value;
        }
        private object get_17_CompositionImage_PlaceholderBrush(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.PlaceholderBrush;
        }
        private void set_17_CompositionImage_PlaceholderBrush(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            that.PlaceholderBrush = (global::Windows.UI.Composition.CompositionBrush)Value;
        }
        private object get_18_CompositionImage_SurfaceBrush(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.SurfaceBrush;
        }
        private object get_19_CompositionImage_SpriteVisual(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.SpriteVisual;
        }
        private object get_20_CompositionImage_PlaceholderDelay(object instance)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            return that.PlaceholderDelay;
        }
        private void set_20_CompositionImage_PlaceholderDelay(object instance, object Value)
        {
            var that = (global::Orbit.Helpers.Composition.CompositionImage)instance;
            that.PlaceholderDelay = (global::System.TimeSpan)Value;
        }
        private object get_21_TimelineStory_Item(object instance)
        {
            var that = (global::Orbit.Controls.TimelineStory)instance;
            return that.Item;
        }
        private void set_21_TimelineStory_Item(object instance, object Value)
        {
            var that = (global::Orbit.Controls.TimelineStory)instance;
            that.Item = (global::Orbit.Models.Planet)Value;
        }
        private object get_22_Timeline_TimelinePanel(object instance)
        {
            var that = (global::Orbit.Controls.Timeline)instance;
            return that.TimelinePanel;
        }
        private object get_23_Timeline_ItemTemplate(object instance)
        {
            var that = (global::Orbit.Controls.Timeline)instance;
            return that.ItemTemplate;
        }
        private void set_23_Timeline_ItemTemplate(object instance, object Value)
        {
            var that = (global::Orbit.Controls.Timeline)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_24_Timeline_HeaderContent(object instance)
        {
            var that = (global::Orbit.Controls.Timeline)instance;
            return that.HeaderContent;
        }
        private void set_24_Timeline_HeaderContent(object instance, object Value)
        {
            var that = (global::Orbit.Controls.Timeline)instance;
            that.HeaderContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_25_Timeline_ItemsSource(object instance)
        {
            var that = (global::Orbit.Controls.Timeline)instance;
            return that.ItemsSource;
        }
        private void set_25_Timeline_ItemsSource(object instance, object Value)
        {
            var that = (global::Orbit.Controls.Timeline)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_26_TimelineItem_IsActionable(object instance)
        {
            var that = (global::Orbit.Controls.TimelineItem)instance;
            return that.IsActionable;
        }
        private void set_26_TimelineItem_IsActionable(object instance, object Value)
        {
            var that = (global::Orbit.Controls.TimelineItem)instance;
            that.IsActionable = (global::System.Boolean)Value;
        }
        private object get_27_TimelineItem_IsInFocus(object instance)
        {
            var that = (global::Orbit.Controls.TimelineItem)instance;
            return that.IsInFocus;
        }
        private void set_27_TimelineItem_IsInFocus(object instance, object Value)
        {
            var that = (global::Orbit.Controls.TimelineItem)instance;
            that.IsInFocus = (global::System.Boolean)Value;
        }
        private object get_28_TimelinePanel_ItemTemplate(object instance)
        {
            var that = (global::Orbit.Controls.TimelinePanel)instance;
            return that.ItemTemplate;
        }
        private void set_28_TimelinePanel_ItemTemplate(object instance, object Value)
        {
            var that = (global::Orbit.Controls.TimelinePanel)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_29_TimelinePanel_TopItemIndex(object instance)
        {
            var that = (global::Orbit.Controls.TimelinePanel)instance;
            return that.TopItemIndex;
        }
        private void set_29_TimelinePanel_TopItemIndex(object instance, object Value)
        {
            var that = (global::Orbit.Controls.TimelinePanel)instance;
            that.TopItemIndex = (global::System.Int32)Value;
        }
        private object get_30_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_30_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_31_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_31_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_32_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_32_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_33_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_33_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_34_DeviceFamilyStateTrigger_DeviceFamily(object instance)
        {
            var that = (global::Orbit.StateTriggers.DeviceFamilyStateTrigger)instance;
            return that.DeviceFamily;
        }
        private void set_34_DeviceFamilyStateTrigger_DeviceFamily(object instance, object Value)
        {
            var that = (global::Orbit.StateTriggers.DeviceFamilyStateTrigger)instance;
            that.DeviceFamily = (global::Orbit.StateTriggers.DeviceFamily)Value;
        }
        private object get_35_DeviceFamilyStateTrigger_IsActive(object instance)
        {
            var that = (global::Orbit.StateTriggers.DeviceFamilyStateTrigger)instance;
            return that.IsActive;
        }
        private object get_36_RootView_ImageCount(object instance)
        {
            var that = (global::Orbit.Views.RootView)instance;
            return that.ImageCount;
        }
        private void set_36_RootView_ImageCount(object instance, object Value)
        {
            var that = (global::Orbit.Views.RootView)instance;
            that.ImageCount = (global::System.Int32)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Orbit.Orbit_XamlTypeInfo.XamlMember xamlMember = null;
            global::Orbit.Orbit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Orbit.ViewModels.Base.ViewModelLocator.PlanetsViewModel":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.ViewModels.Base.ViewModelLocator");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "PlanetsViewModel", "Orbit.ViewModels.PlanetsViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_PlanetsViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.ViewModels.Base.ViewModelLocator.PlanetDetailViewModel":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.ViewModels.Base.ViewModelLocator");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "PlanetDetailViewModel", "Orbit.ViewModels.PlanetDetailViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_PlanetDetailViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.CastingElement":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "CastingElement", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_2_CompositionShadow_CastingElement;
                xamlMember.Setter = set_2_CompositionShadow_CastingElement;
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.Color":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_CompositionShadow_Color;
                xamlMember.Setter = set_3_CompositionShadow_Color;
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.OffsetX":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "OffsetX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_CompositionShadow_OffsetX;
                xamlMember.Setter = set_4_CompositionShadow_OffsetX;
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.OffsetY":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "OffsetY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_CompositionShadow_OffsetY;
                xamlMember.Setter = set_5_CompositionShadow_OffsetY;
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.ShadowOpacity":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "ShadowOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_CompositionShadow_ShadowOpacity;
                xamlMember.Setter = set_6_CompositionShadow_ShadowOpacity;
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.BlurRadius":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "BlurRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_CompositionShadow_BlurRadius;
                xamlMember.Setter = set_7_CompositionShadow_BlurRadius;
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.DropShadow":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "DropShadow", "Windows.UI.Composition.DropShadow");
                xamlMember.Getter = get_8_CompositionShadow_DropShadow;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.Mask":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "Mask", "Windows.UI.Composition.CompositionBrush");
                xamlMember.Getter = get_9_CompositionShadow_Mask;
                xamlMember.Setter = set_9_CompositionShadow_Mask;
                break;
            case "Orbit.Helpers.Composition.CompositionShadow.OffsetZ":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionShadow");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "OffsetZ", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_CompositionShadow_OffsetZ;
                xamlMember.Setter = set_10_CompositionShadow_OffsetZ;
                break;
            case "Orbit.Helpers.Composition.CompositionImage.Source":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.Getter = get_11_CompositionImage_Source;
                xamlMember.Setter = set_11_CompositionImage_Source;
                break;
            case "Orbit.Helpers.Composition.CompositionImage.Stretch":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.Getter = get_12_CompositionImage_Stretch;
                xamlMember.Setter = set_12_CompositionImage_Stretch;
                break;
            case "Orbit.Helpers.Composition.CompositionImage.IsContentLoaded":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "IsContentLoaded", "Boolean");
                xamlMember.Getter = get_13_CompositionImage_IsContentLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.Helpers.Composition.CompositionImage.SharedSurface":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "SharedSurface", "Boolean");
                xamlMember.Getter = get_14_CompositionImage_SharedSurface;
                xamlMember.Setter = set_14_CompositionImage_SharedSurface;
                break;
            case "Orbit.Helpers.Composition.CompositionImage.LoadTimeEffectHandler":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "LoadTimeEffectHandler", "Orbit.Helpers.Composition.LoadTimeEffectHandler");
                xamlMember.Getter = get_15_CompositionImage_LoadTimeEffectHandler;
                xamlMember.Setter = set_15_CompositionImage_LoadTimeEffectHandler;
                break;
            case "Orbit.Helpers.Composition.CompositionImage.Brush":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "Brush", "Windows.UI.Composition.CompositionBrush");
                xamlMember.Getter = get_16_CompositionImage_Brush;
                xamlMember.Setter = set_16_CompositionImage_Brush;
                break;
            case "Orbit.Helpers.Composition.CompositionImage.PlaceholderBrush":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "PlaceholderBrush", "Windows.UI.Composition.CompositionBrush");
                xamlMember.Getter = get_17_CompositionImage_PlaceholderBrush;
                xamlMember.Setter = set_17_CompositionImage_PlaceholderBrush;
                break;
            case "Orbit.Helpers.Composition.CompositionImage.SurfaceBrush":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "SurfaceBrush", "Windows.UI.Composition.CompositionSurfaceBrush");
                xamlMember.Getter = get_18_CompositionImage_SurfaceBrush;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.Helpers.Composition.CompositionImage.SpriteVisual":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "SpriteVisual", "Windows.UI.Composition.SpriteVisual");
                xamlMember.Getter = get_19_CompositionImage_SpriteVisual;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.Helpers.Composition.CompositionImage.PlaceholderDelay":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Helpers.Composition.CompositionImage");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "PlaceholderDelay", "TimeSpan");
                xamlMember.Getter = get_20_CompositionImage_PlaceholderDelay;
                xamlMember.Setter = set_20_CompositionImage_PlaceholderDelay;
                break;
            case "Orbit.Controls.TimelineStory.Item":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.TimelineStory");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "Item", "Orbit.Models.Planet");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_TimelineStory_Item;
                xamlMember.Setter = set_21_TimelineStory_Item;
                break;
            case "Orbit.Controls.Timeline.TimelinePanel":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.Timeline");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "TimelinePanel", "Orbit.Controls.TimelinePanel");
                xamlMember.Getter = get_22_Timeline_TimelinePanel;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.Controls.Timeline.ItemTemplate":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.Timeline");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_23_Timeline_ItemTemplate;
                xamlMember.Setter = set_23_Timeline_ItemTemplate;
                break;
            case "Orbit.Controls.Timeline.HeaderContent":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.Timeline");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "HeaderContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_Timeline_HeaderContent;
                xamlMember.Setter = set_24_Timeline_HeaderContent;
                break;
            case "Orbit.Controls.Timeline.ItemsSource":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.Timeline");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_Timeline_ItemsSource;
                xamlMember.Setter = set_25_Timeline_ItemsSource;
                break;
            case "Orbit.Controls.TimelineItem.IsActionable":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.TimelineItem");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "IsActionable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_TimelineItem_IsActionable;
                xamlMember.Setter = set_26_TimelineItem_IsActionable;
                break;
            case "Orbit.Controls.TimelineItem.IsInFocus":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.TimelineItem");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "IsInFocus", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_TimelineItem_IsInFocus;
                xamlMember.Setter = set_27_TimelineItem_IsInFocus;
                break;
            case "Orbit.Controls.TimelinePanel.ItemTemplate":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.TimelinePanel");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_28_TimelinePanel_ItemTemplate;
                xamlMember.Setter = set_28_TimelinePanel_ItemTemplate;
                break;
            case "Orbit.Controls.TimelinePanel.TopItemIndex":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Controls.TimelinePanel");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "TopItemIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_TimelinePanel_TopItemIndex;
                xamlMember.Setter = set_29_TimelinePanel_TopItemIndex;
                break;
            case "Windows.UI.Color.A":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_30_Color_A;
                xamlMember.Setter = set_30_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_31_Color_B;
                xamlMember.Setter = set_31_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_32_Color_G;
                xamlMember.Setter = set_32_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_33_Color_R;
                xamlMember.Setter = set_33_Color_R;
                break;
            case "Orbit.StateTriggers.DeviceFamilyStateTrigger.DeviceFamily":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.StateTriggers.DeviceFamilyStateTrigger");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "DeviceFamily", "Orbit.StateTriggers.DeviceFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_DeviceFamilyStateTrigger_DeviceFamily;
                xamlMember.Setter = set_34_DeviceFamilyStateTrigger_DeviceFamily;
                break;
            case "Orbit.StateTriggers.DeviceFamilyStateTrigger.IsActive":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.StateTriggers.DeviceFamilyStateTrigger");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.Getter = get_35_DeviceFamilyStateTrigger_IsActive;
                xamlMember.SetIsReadOnly();
                break;
            case "Orbit.Views.RootView.ImageCount":
                userType = (global::Orbit.Orbit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Orbit.Views.RootView");
                xamlMember = new global::Orbit.Orbit_XamlTypeInfo.XamlMember(this, "ImageCount", "Int32");
                xamlMember.Getter = get_36_RootView_ImageCount;
                xamlMember.Setter = set_36_RootView_ImageCount;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Orbit.Orbit_XamlTypeInfo.XamlSystemBaseType
    {
        global::Orbit.Orbit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Orbit.Orbit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Orbit.Orbit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Orbit.Orbit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

